THE KRAZY PHYSICS ENGINE DOCUMENTATION
By Group 7 for GDPHYSX XX22

ENGINE CLASSES:

class ClassName
	> class description
		* type variableName
			> variable description

		- type methodName(type param)
			@ type param - parameter description
			> method description

class Vector
	> Class for vector values (x, y, z), 
	  including operations on vectors useful for physics simulations
		* float x, float y, float z - 
		  > x, y, and z values of the vector object

		- float Magnitude() - 
		  > returns the magnitude of the vector object's x, y, and z values

		- Vector Normalize()
		  > returns the normalized vector of the vector's x, y, and z values, representing the vector's direction

		- Vector operator+ && void operator+=
		  > performs vector addition on the vector object and another vector object

		- Vector operator- && void operator-=
		  > performs vector subtraction on the vector object and another vector object

		- Vector operator* && void operator *=
		  > performs scalar multiplication on the vector object and a float value

		- Vector operator / && void operator /=
		  > performs scalar division on the vector object and a float value

		- float operator,
		  > performs scalar (dot) multiplication on the vector object and another vector object

		- Vector operator&
		  > performs vector (cross) multiplication on the vector object and another vector object

		- Vector operator%
		  > performs component multiplication on the vector object and another vector object

class PhysicsParticle
	> main class for particle objects of the engine's particle system
		* float mass
			> mass of the particle object

		* Vector position
			> position of the particle object represented as a Vector object

		* Vector velocity
			> velocity of the particle object represented as a Vector object

		* Vector accel
			> acceleration of the particle object represented as a Vector object

		* float lifespan
			> the time, represented in seconds, that a particle will be rendered on screen; ranges from 1 - 10

		* float damping
			> the damping factor applied to the particle object

		* protected bool isDestroyed
			> flag for particle state; particle will not be rendered if true; false by default

		* protected Vector accumulatedForce
			> the total forces acting upon the particle object

		- void update(float time)
			@ float time - time in milliseconds for updating particle object
			> updates the particle object's position and velocity, then resets any forces acting upon it

		- void updatePosition(float time)
			@ float time - time in milliseconds for updating particle object
			> updates the particle object's position using latest position formula

		- void updateVelocity(float time)
			@ float time - time in milliseconds for updating particle object
			> updates the particle object's velocity taking into account forces acting upon the particle

		- void isDestroy()
			> returns the value of isDestroyed

		- void destroy()
			> sets isDestroyed to true

		- void addForce(Vector force)
			@ Vector force - the force acting upon the particle represented as a Vector object
			> adds a force Vector value to the accumulated force

		- void resetForce()
			> resets the particle's accumulated forces and acceleration to 0

class PhysicsWorld
	> a class that handles all particle object updates and forces
		* ForceRegistry forceRegistry
			> a force registry object for storing force generators to be applied to particle objects

		* list<PhysicsParticle*> particles
			> the global list of particle objects present in the scene

		- void addParticle(PhysicsParticle* toAdd)
			@ PhysicsParticle* toAdd - the particle object to add to the particle list
			> adds a particle object to the particle list in the world

		- void update(float time)
			@ float time - time in milliseconds for updating particle object
			> updates all particle objects contained in the particle list by iterating
			through each particle object and calling its update() function

class ForceGenerator
	> a parent class for force generators
		- virtual void updateForce(PhysicsParticle* p, float time)
			@ PhysicsParticle* p - particle object to be acted upon by a force
			float time - time in milliseconds for updating particle object
			> a virtual function to be overridden by child classes; adds a force to a particle object

class GravityForceGenerator > extends ForceGenerator
	> force generator for gravity
		- GravityForceGenerator(const Vector gravity)
			@ const Vector gravity - gravitational force represented as a Vector object
			> constructor function

		- void updateForce(PhysicsParticle* particle, float time)
			@ Krazy* particle - particle object to receive gravitational force
			@ float time - time in milliseconds for updating particle object
			> updates the particle object's gravitation force, does nothing if mass is a non-positive number

class ForceRegistry
	> a class handling and storing force generators to be applied to particles
		* protected struct particleForceRegistry
			> a data structure containing a particle object and a force generator object

		* protected list<particleForceRegistry> registry
			> a list of particleForceRegistry structures

		- void add(PhysicsParticle* particle, ForceGenerator* generator)
			@ PhysicsParticle* particle - a particle object to be affected by a force
			@ ForceGenerator* generator - a force generator object to act upon a particle
			> adds a force generator to a particle, then pushes the pair to the registry

		- void clear()
			> clears the force registry

		- void remove(PhysicsParticle* particle, ForceGenerator* generator)
			@ PhysicsParticle* particle - a particle object to be removed
			@ ForceGenerator* generator - a force generator object to be removed
			> removes a particle and force generator pair from the list

		- void updateForces(float time)
			@ float time - time in milliseconds for updating particle object
			> updates forces in generator objects in registry pair

class ParticleLink
	> a base class for particle links
		* public PhysicsParticle* particles[2]
			> the pair of particles to be linked

		* public virtual ParticleContact* getContact()
			> virtual function for getting particle contacts
		
		- protected float currentLength()
			> returns the distance between the two particles in the pair

class ParticleCable > extends ParticleLink
	> a class for linking a particle to an anchor point for the purposes of the simulation
		* public float maxLength
			> the maximum distance between the particle and its anchor

		* public float restitution
			> coefficient of restitution of the link

		* public Vector anchorPoint
			> position of the point that the particle will be anchored to

		- ParticleCable(PhysicsParticle* particle, Vector anchor, float maxLen, float rest)
			> constructor for particle cable link objects, initializes the object with
			  the particle, its anchor, and the link's max length and CoR

		- public ParticleContact* getContact() override
			> returns a ParticleContact object storing the information of the cable link